// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	// The Endorse service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to obtain sufficient endorsement.
	// The gateway will determine the endorsement plan for the requested chaincode and
	// forward to the appropriate peers for endorsement. It will return to the client a
	// PreparedTransaction message which contains a Envelope message as defined
	// in fabric-protos/common/common.proto.  The client must sign the contents of this
	// envelope before invoking the Submit service
	Endorse(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*PreparedTransaction, error)
	// Ths Submit service will process the PreparedTransaction message returned from Endorse service
	// once it has been signed by the client. A stream is opened to return multiple return values.
	// - The Gateway will register transaction event listeners for the given channel/txId.
	// - It will then broadcast the Envelope to the ordering service.
	// - The success/error response is passed back to the client in the stream
	// - The Gateway awaits sufficient transaction commit events before returning and closing the stream,
	//   indicating to the client that transaction has been committed.
	Submit(ctx context.Context, in *PreparedTransaction, opts ...grpc.CallOption) (Gateway_SubmitClient, error)
	// The Evaluate service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to invoke the transaction function and return the result to the client.
	// No ledger updates are make.  The gateway will select an appropriate peer to query based on
	// block height and load.
	Evaluate(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*Result, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) Endorse(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*PreparedTransaction, error) {
	out := new(PreparedTransaction)
	err := c.cc.Invoke(ctx, "/protos.Gateway/Endorse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Submit(ctx context.Context, in *PreparedTransaction, opts ...grpc.CallOption) (Gateway_SubmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/protos.Gateway/Submit", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewaySubmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_SubmitClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type gatewaySubmitClient struct {
	grpc.ClientStream
}

func (x *gatewaySubmitClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) Evaluate(ctx context.Context, in *ProposedTransaction, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/protos.Gateway/Evaluate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	// The Endorse service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to obtain sufficient endorsement.
	// The gateway will determine the endorsement plan for the requested chaincode and
	// forward to the appropriate peers for endorsement. It will return to the client a
	// PreparedTransaction message which contains a Envelope message as defined
	// in fabric-protos/common/common.proto.  The client must sign the contents of this
	// envelope before invoking the Submit service
	Endorse(context.Context, *ProposedTransaction) (*PreparedTransaction, error)
	// Ths Submit service will process the PreparedTransaction message returned from Endorse service
	// once it has been signed by the client. A stream is opened to return multiple return values.
	// - The Gateway will register transaction event listeners for the given channel/txId.
	// - It will then broadcast the Envelope to the ordering service.
	// - The success/error response is passed back to the client in the stream
	// - The Gateway awaits sufficient transaction commit events before returning and closing the stream,
	//   indicating to the client that transaction has been committed.
	Submit(*PreparedTransaction, Gateway_SubmitServer) error
	// The Evaluate service passes the ProposedTransaction (which contains the signed proposal)
	// to the gateway in order to invoke the transaction function and return the result to the client.
	// No ledger updates are make.  The gateway will select an appropriate peer to query based on
	// block height and load.
	Evaluate(context.Context, *ProposedTransaction) (*Result, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) Endorse(context.Context, *ProposedTransaction) (*PreparedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endorse not implemented")
}
func (UnimplementedGatewayServer) Submit(*PreparedTransaction, Gateway_SubmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedGatewayServer) Evaluate(context.Context, *ProposedTransaction) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_Endorse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Endorse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Gateway/Endorse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Endorse(ctx, req.(*ProposedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Submit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PreparedTransaction)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).Submit(m, &gatewaySubmitServer{stream})
}

type Gateway_SubmitServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type gatewaySubmitServer struct {
	grpc.ServerStream
}

func (x *gatewaySubmitServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_Evaluate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Evaluate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Gateway/Evaluate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Evaluate(ctx, req.(*ProposedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endorse",
			Handler:    _Gateway_Endorse_Handler,
		},
		{
			MethodName: "Evaluate",
			Handler:    _Gateway_Evaluate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Submit",
			Handler:       _Gateway_Submit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway/gateway.proto",
}
